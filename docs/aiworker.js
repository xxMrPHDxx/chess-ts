/*! For license information please see aiworker.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./src/ai/algoritm.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Algorithm),\n/* harmony export */   "Minimax": () => (/* binding */ Minimax),\n/* harmony export */   "AlphaBetaPruning": () => (/* binding */ AlphaBetaPruning)\n/* harmony export */ });\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../board */ "./src/board.ts");\n/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../piece */ "./src/piece.ts");\n\n\nclass Algorithm {\n    constructor(evaluator) {\n        this.evaluator = evaluator;\n    }\n}\nclass Minimax extends Algorithm {\n    constructor(evaluator, depth = 3) {\n        super(evaluator);\n        this.depth = depth;\n    }\n    evaluate(board) {\n        const isWhite = board.player.ally === _piece__WEBPACK_IMPORTED_MODULE_1__.Alliance.W;\n        let value = isWhite ? -Infinity : Infinity, bestMove = null;\n        for (const move of board.player.moves) {\n            try {\n                const next = board.makeMove(move);\n                if (board === next)\n                    continue;\n                if (isWhite) {\n                    const val = this.max(next, this.depth - 1);\n                    if (val > value) {\n                        value = val;\n                        bestMove = move;\n                    }\n                }\n                else {\n                    const val = this.min(next, this.depth - 1);\n                    if (val < value) {\n                        value = val;\n                        bestMove = move;\n                    }\n                }\n            }\n            catch (err) {\n                continue;\n            }\n        }\n        return bestMove;\n    }\n    min(board, depth) {\n        if (_board__WEBPACK_IMPORTED_MODULE_0__["default"].gameEnded(board) || depth <= 0)\n            return this.evaluator.evaluate(board, depth);\n        let minValue = Infinity;\n        for (const move of board.player.moves) {\n            try {\n                const next = move.execute(board);\n                const value = this.max(next, depth - 1);\n                if (value < minValue)\n                    minValue = value;\n            }\n            catch (err) {\n                continue;\n            }\n        }\n        return minValue;\n    }\n    max(board, depth) {\n        if (_board__WEBPACK_IMPORTED_MODULE_0__["default"].gameEnded(board) || depth <= 0)\n            return this.evaluator.evaluate(board, depth);\n        let maxValue = -Infinity;\n        for (const move of board.player.moves) {\n            try {\n                const next = move.execute(board);\n                const value = this.min(next, depth - 1);\n                if (value > maxValue)\n                    maxValue = value;\n            }\n            catch (err) {\n                continue;\n            }\n        }\n        return maxValue;\n    }\n}\nclass AlphaBetaPruning extends Algorithm {\n    constructor(evaluator, depth = 3) {\n        super(evaluator);\n        this.depth = depth;\n    }\n    evaluate(board) {\n        const isWhite = board.player.ally === _piece__WEBPACK_IMPORTED_MODULE_1__.Alliance.W;\n        let value = isWhite ? -Infinity : Infinity, bestMove = null;\n        for (const move of board.player.moves) {\n            try {\n                const next = board.makeMove(move);\n                if (board === next)\n                    continue;\n                if (isWhite) {\n                    const val = this.max(next, this.depth - 1, -Infinity, Infinity);\n                    if (val > value) {\n                        value = val;\n                        bestMove = move;\n                    }\n                }\n                else {\n                    const val = this.min(next, this.depth - 1, -Infinity, Infinity);\n                    if (val < value) {\n                        value = val;\n                        bestMove = move;\n                    }\n                }\n            }\n            catch (err) {\n                continue;\n            }\n        }\n        return bestMove;\n    }\n    min(board, depth, alpha, beta) {\n        if (_board__WEBPACK_IMPORTED_MODULE_0__["default"].gameEnded(board) || depth <= 0)\n            return this.evaluator.evaluate(board, depth);\n        let minValue = Infinity;\n        for (const move of board.player.moves) {\n            try {\n                const next = board.makeMove(move);\n                const value = this.max(next, depth - 1, alpha, beta);\n                if (value < minValue)\n                    minValue = value;\n                if (value <= alpha)\n                    break;\n                if (value < beta)\n                    beta = value;\n            }\n            catch (err) {\n                continue;\n            }\n        }\n        return minValue;\n    }\n    max(board, depth, alpha, beta) {\n        if (_board__WEBPACK_IMPORTED_MODULE_0__["default"].gameEnded(board) || depth <= 0)\n            return this.evaluator.evaluate(board, depth);\n        let maxValue = -Infinity;\n        for (const move of board.player.moves) {\n            try {\n                const next = board.makeMove(move);\n                const value = this.min(next, depth - 1, alpha, beta);\n                if (value > maxValue)\n                    maxValue = value;\n                if (value >= beta)\n                    break;\n                if (value > alpha)\n                    alpha = value;\n            }\n            catch (err) {\n                continue;\n            }\n        }\n        return maxValue;\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/ai/algoritm.ts?')},"./src/ai/evaluator.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ BoardEvaluator),\n/* harmony export */   "Default": () => (/* binding */ Default)\n/* harmony export */ });\n/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../piece */ "./src/piece.ts");\n\nconst CHECK_MATE_BONUS = 10000;\nconst CHECK_BONUS = 45;\nconst CASTLE_BONUS = 25;\nconst MOBILITY_MULTIPLIER = 5;\nconst ATTACK_MULTIPLIER = 1;\nconst TWO_BISHOPS_BONUS = 25;\nclass BoardEvaluator {\n}\nclass Default extends BoardEvaluator {\n    evaluate(board, depth) {\n        return this.evaluatePlayer(board.white, board.black, depth) -\n            this.evaluatePlayer(board.black, board.white, depth);\n    }\n    evaluatePlayer(player, opponent, depth) {\n        return this.mobility(player, opponent) +\n            this.kingThreats(player, depth) +\n            this.attacks(player) +\n            this.castle(player) +\n            this.pieces(player) +\n            this.pawnStructure(player);\n    }\n    mobility(player, opponent) {\n        return MOBILITY_MULTIPLIER * player.moves.size * 10 / opponent.moves.size;\n    }\n    kingThreats(player, depth) {\n        return player.checkmate ? CHECK_MATE_BONUS * this.depthBonus(depth) : this.check(player);\n    }\n    attacks(player) {\n        let attackScore = 0;\n        for (const move of player.moves) {\n            if (move.attack) {\n                if (Default.getPieceValue(move.piece.type) <= Default.getPieceValue(move.target.piece.type))\n                    attackScore++;\n            }\n        }\n        return attackScore * ATTACK_MULTIPLIER;\n    }\n    castle(player) {\n        return 0; // TODO: Implement castled flag in player?\n    }\n    check(player) {\n        return player.check ? CHECK_BONUS : 0;\n    }\n    depthBonus(depth) {\n        return depth === 0 ? 1 : depth * 100;\n    }\n    pieces(player) {\n        let total = 0;\n        for (const piece of player.pieces)\n            total += Default.getPieceValue(piece.type);\n        return total;\n    }\n    pawnStructure(player) {\n        return 0; // TODO: Implement later!\n    }\n    static getPieceValue(type) {\n        switch (type) {\n            case _piece__WEBPACK_IMPORTED_MODULE_0__.Type.R: return 500;\n            case _piece__WEBPACK_IMPORTED_MODULE_0__.Type.N: return 300;\n            case _piece__WEBPACK_IMPORTED_MODULE_0__.Type.B: return 330;\n            case _piece__WEBPACK_IMPORTED_MODULE_0__.Type.Q: return 900;\n            case _piece__WEBPACK_IMPORTED_MODULE_0__.Type.K: return 10000;\n            case _piece__WEBPACK_IMPORTED_MODULE_0__.Type.P: return 100;\n            default: return 0;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/ai/evaluator.ts?')},"./src/ai/worker.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../board */ \"./src/board.ts\");\n/* harmony import */ var _algoritm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./algoritm */ \"./src/ai/algoritm.ts\");\n/* harmony import */ var _evaluator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./evaluator */ \"./src/ai/evaluator.ts\");\n\n\n\n// const ai: Algorithm = new Minimax(new Default(), 3);\nconst ai = new _algoritm__WEBPACK_IMPORTED_MODULE_1__.AlphaBetaPruning(new _evaluator__WEBPACK_IMPORTED_MODULE_2__.Default(), 3);\nlet current = null;\nfunction handleEvent(type, data) {\n    if (type === 'think') {\n        console.debug(`${data.player} player is thinking`);\n        current = data.player;\n        const board = _board__WEBPACK_IMPORTED_MODULE_0__.Builder.fromBit(data.board);\n        const move = ai.evaluate(board);\n        self.postMessage({\n            type: 'move',\n            from: move.piece.pos,\n            to: move.target.pos,\n        });\n    }\n}\nself.onmessage = event => {\n    const message = event.data;\n    handleEvent(message.type, message);\n};\nself.onmessageerror = err => console.error('Error', err);\n\n\n//# sourceURL=webpack://my-webpack-project/./src/ai/worker.ts?")},"./src/board.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Tile": () => (/* binding */ Tile),\n/* harmony export */   "default": () => (/* binding */ Board),\n/* harmony export */   "Builder": () => (/* binding */ Builder),\n/* harmony export */   "BoardSerializer": () => (/* binding */ BoardSerializer)\n/* harmony export */ });\n/* harmony import */ var _containers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./containers */ "./src/containers.ts");\n/* harmony import */ var _move__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./move */ "./src/move.ts");\n/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./piece */ "./src/piece.ts");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./player */ "./src/player.ts");\n\n\n\n\nclass Tile {\n    constructor(pos, piece = null) {\n        this.piece = null;\n        this._pos = pos;\n        this._row = pos >> 3;\n        this._col = pos & 7;\n        this.piece = piece;\n    }\n    get col() { return this._col; }\n    get pos() { return this._pos; }\n    get row() { return this._row; }\n}\n;\nclass Board {\n    constructor(builder) {\n        this.tiles = new Array();\n        this.activePieces = new _containers__WEBPACK_IMPORTED_MODULE_0__.Pieces();\n        this.capturedPieces = new _containers__WEBPACK_IMPORTED_MODULE_0__.Pieces();\n        this.legalMoves = new _containers__WEBPACK_IMPORTED_MODULE_0__.Moves();\n        this.moveMaker = builder.moveMaker;\n        this.enPassant = builder.enPassantPawn;\n        for (let i = 0; i < 64; i++) {\n            const tile = builder.tiles.get(i);\n            if (tile.piece !== null)\n                this.pieces.add(tile.piece);\n            this.tiles.push(tile);\n        }\n        for (const piece of this.pieces) {\n            for (const move of piece.calculateLegalMoves(this)) {\n                this.legalMoves.add(move);\n            }\n        }\n        this.whitePlayer = new _player__WEBPACK_IMPORTED_MODULE_3__["default"](this, _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.W, this.activePieces, this.legalMoves);\n        this.blackPlayer = new _player__WEBPACK_IMPORTED_MODULE_3__["default"](this, _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.B, this.activePieces, this.legalMoves);\n        this.currentPlayer = this.moveMaker === _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.W ? this.whitePlayer : this.blackPlayer;\n    }\n    draw(ctx, darkColor, lightColor, size) {\n        ctx.textAlign = \'center\';\n        ctx.textBaseline = \'middle\';\n        ctx.font = `${size * 0.9}px Arial`;\n        for (let i = 0; i < 64; i++) {\n            const row = i >> 3, col = i & 7, tile = this.tiles[i];\n            ctx.fillStyle = (row + col) % 2 !== 0 ? darkColor : lightColor;\n            ctx.fillRect(col * size, row * size, size, size);\n            if (tile.piece) {\n                const symbol = (0,_piece__WEBPACK_IMPORTED_MODULE_2__.getSymbol)(tile.piece);\n                ctx.fillStyle = \'black\';\n                ctx.fillText(symbol, (tile.piece.col + 0.5) * size, (tile.piece.row + 0.5) * size);\n            }\n        }\n    }\n    getTile(pos) {\n        if (pos < 0 || pos >= 64)\n            throw new Error(\'Tile index out of bounds!\');\n        return this.tiles[pos];\n    }\n    isCurrentPlayer(ally) {\n        return ally === this.moveMaker;\n    }\n    makeMove(move) {\n        if (move.piece === null || move.piece.ally !== this.moveMaker)\n            return this;\n        try {\n            const board = move.execute(this);\n            if (board.opponent.check)\n                return this;\n            if (move.attack) {\n                if (move instanceof _move__WEBPACK_IMPORTED_MODULE_1__.EnPassantCapture)\n                    this.capturedPieces.add(move.captured, true);\n                else\n                    this.capturedPieces.add(move.target.piece, true);\n            }\n            return board;\n        }\n        catch (err) {\n            if (err instanceof _player__WEBPACK_IMPORTED_MODULE_3__.NoKingFound)\n                return this;\n            else\n                throw err;\n        }\n    }\n    setPiece(piece) {\n        if (piece.pos < 0 || piece.pos >= 64)\n            return;\n        this.tiles[piece.pos].piece = piece;\n    }\n    get captures() { return this.capturedPieces; }\n    get moves() { return this.legalMoves; }\n    get pieces() { return this.activePieces; }\n    get white() { return this.whitePlayer; }\n    get black() { return this.blackPlayer; }\n    get player() { return this.currentPlayer; }\n    get opponent() {\n        if (this.currentPlayer === this.whitePlayer)\n            return this.blackPlayer;\n        return this.whitePlayer;\n    }\n    get enpassant() { return this.enPassant; }\n    static createStandardBoard() {\n        return [\n            -1, -2, -3, -4, -5, -3, -2, -1,\n            -6, -6, -6, -6, -6, -6, -6, -6,\n            ...new Array(4 * 8).fill(0),\n            6, 6, 6, 6, 6, 6, 6, 6,\n            1, 2, 3, 4, 5, 3, 2, 1,\n        ].reduce((builder, p, pos) => {\n            const ally = p < 0 ? _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.B : _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.W;\n            switch (Math.abs(p)) {\n                case 1:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.Rook(pos, ally));\n                    break;\n                case 2:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.Knight(pos, ally));\n                    break;\n                case 3:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.Bishop(pos, ally));\n                    break;\n                case 4:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.Queen(pos, ally));\n                    break;\n                case 5:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.King(pos, ally));\n                    break;\n                case 6:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.Pawn(pos, ally));\n                    break;\n            }\n            return builder;\n        }, new Builder()).build();\n    }\n    static gameEnded(board) {\n        for (const player of [board.white, board.black]) {\n            if (player.checkmate || player.stalemate)\n                return true;\n        }\n        return false;\n    }\n    static getOpponent(ally) {\n        return ally === _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.W ? _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.B : _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.W;\n    }\n    static isValidPosition(pos) {\n        return pos >= 0 && pos < 64;\n    }\n}\nclass Builder {\n    constructor(moveMaker = _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.W) {\n        this.enPassantPawn = null;\n        this._tiles = new Map();\n        this.moveMaker = moveMaker;\n        for (let i = 0; i < 64; i++)\n            this._tiles.set(i, new Tile(i));\n    }\n    get tiles() { return this._tiles; }\n    setEnPassantPawn(pawn) {\n        this.enPassantPawn = pawn;\n        return this;\n    }\n    setPiece(piece) {\n        const tile = this._tiles.get(piece.pos);\n        if (!tile)\n            return this;\n        tile.piece = piece;\n        return this;\n    }\n    build() {\n        return new Board(this);\n    }\n    static fromBit(bits) {\n        const builder = new Builder(bits[0] === \'1\' ? _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.W : _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.B);\n        for (let i = 0; i < 64; i++) {\n            const j = i * 4 + 1;\n            const tile = parseInt(bits.substring(j, j + 4), 2);\n            const ally = (tile >> 3) === 1 ? _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.W : _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.B;\n            switch (tile & 0b111) {\n                case 0b001:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.Rook(i, ally));\n                    break;\n                case 0b010:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.Knight(i, ally));\n                    break;\n                case 0b011:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.Bishop(i, ally));\n                    break;\n                case 0b100:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.Queen(i, ally));\n                    break;\n                case 0b101:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.King(i, ally));\n                    break;\n                case 0b110:\n                    builder.setPiece(new _piece__WEBPACK_IMPORTED_MODULE_2__.Pawn(i, ally));\n                    break;\n            }\n        }\n        return builder.build();\n    }\n}\nclass BoardSerializer {\n    static bit(board) {\n        let bits = board.player.ally === _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.W ? \'1\' : \'0\', max = -Infinity;\n        for (let i = 0; i < 64; i++) {\n            const tile = board.getTile(i);\n            let state = 0;\n            if (tile.piece) {\n                if (tile.piece.ally === _piece__WEBPACK_IMPORTED_MODULE_2__.Alliance.W)\n                    state = 0b1000;\n                switch (tile.piece.type) {\n                    case _piece__WEBPACK_IMPORTED_MODULE_2__.Type.R:\n                        state += 0b001;\n                        break;\n                    case _piece__WEBPACK_IMPORTED_MODULE_2__.Type.N:\n                        state += 0b010;\n                        break;\n                    case _piece__WEBPACK_IMPORTED_MODULE_2__.Type.B:\n                        state += 0b011;\n                        break;\n                    case _piece__WEBPACK_IMPORTED_MODULE_2__.Type.Q:\n                        state += 0b100;\n                        break;\n                    case _piece__WEBPACK_IMPORTED_MODULE_2__.Type.K:\n                        state += 0b101;\n                        break;\n                    case _piece__WEBPACK_IMPORTED_MODULE_2__.Type.P:\n                        state += 0b110;\n                        break;\n                }\n            }\n            if (state > max)\n                max = state;\n            bits += state.toString(2).padStart(4, \'0\');\n        }\n        return bits;\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/board.ts?')},"./src/containers.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Pieces\": () => (/* binding */ Pieces),\n/* harmony export */   \"Moves\": () => (/* binding */ Moves)\n/* harmony export */ });\n/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece */ \"./src/piece.ts\");\n\nclass Pieces {\n    constructor() {\n        this._whites = new Set();\n        this._blacks = new Set();\n    }\n    add(piece, capture = false) {\n        const pieces = piece.ally === _piece__WEBPACK_IMPORTED_MODULE_0__.Alliance.W ? this._whites : this._blacks;\n        pieces.add(piece);\n        if (capture) {\n            const ally = piece.ally === _piece__WEBPACK_IMPORTED_MODULE_0__.Alliance.W ? 'black' : 'white';\n            const elem = document.querySelector(`#captures-${ally}`);\n            const span = document.createElement('span');\n            span.textContent = (0,_piece__WEBPACK_IMPORTED_MODULE_0__.getSymbol)(piece);\n            elem.appendChild(span);\n        }\n    }\n    get black() {\n        return Pieces.generator(this._blacks);\n    }\n    get white() {\n        return Pieces.generator(this._whites);\n    }\n    *[Symbol.iterator]() {\n        yield* this.white;\n        yield* this.black;\n    }\n    static *generator(pieces) {\n        for (const piece of pieces)\n            yield piece;\n    }\n}\nclass Moves {\n    constructor() {\n        this._whites = new Set();\n        this._blacks = new Set();\n    }\n    add(move) {\n        const moves = move.piece.ally === _piece__WEBPACK_IMPORTED_MODULE_0__.Alliance.W ? this._whites : this._blacks;\n        moves.add(move);\n    }\n    get black() { return Moves.generator(this._blacks); }\n    get white() { return Moves.generator(this._whites); }\n    *[Symbol.iterator]() {\n        yield* this.white;\n        yield* this.black;\n    }\n    static *generator(pieces) {\n        for (const piece of pieces)\n            yield piece;\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/containers.ts?")},"./src/move.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Move),\n/* harmony export */   "Normal": () => (/* binding */ Normal),\n/* harmony export */   "PawnJump": () => (/* binding */ PawnJump),\n/* harmony export */   "Castling": () => (/* binding */ Castling),\n/* harmony export */   "EnPassantCapture": () => (/* binding */ EnPassantCapture),\n/* harmony export */   "Promotion": () => (/* binding */ Promotion)\n/* harmony export */ });\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./board */ "./src/board.ts");\n\nclass Move {\n    constructor(piece, target) {\n        this._attack = target.piece !== null;\n        this._piece = piece;\n        this._target = target;\n    }\n    get attack() { return this._attack; }\n    get piece() { return this._piece; }\n    get target() { return this._target; }\n}\nclass Normal extends Move {\n    execute(board) {\n        const builder = new _board__WEBPACK_IMPORTED_MODULE_0__.Builder(board.opponent.ally);\n        for (const piece of board.pieces) {\n            if (this.piece === piece || this.target.piece === piece)\n                continue;\n            builder.setPiece(piece);\n        }\n        return builder\n            .setPiece(this.piece.moveTo(this.target.pos))\n            .build();\n    }\n}\nclass PawnJump extends Move {\n    execute(board) {\n        const builder = new _board__WEBPACK_IMPORTED_MODULE_0__.Builder(board.opponent.ally);\n        for (const piece of board.pieces) {\n            if (this.piece === piece)\n                continue;\n            builder.setPiece(piece);\n        }\n        const pawn = this.piece.moveTo(this.target.pos);\n        return builder\n            .setPiece(pawn)\n            .setEnPassantPawn(pawn)\n            .build();\n    }\n}\nclass Castling extends Move {\n    constructor(piece, king, target) {\n        super(piece, target);\n        this.king = king;\n        this._attack = false;\n    }\n    execute(board) {\n        const builder = new _board__WEBPACK_IMPORTED_MODULE_0__.Builder(board.opponent.ally);\n        for (const piece of board.pieces) {\n            if (this.piece === piece || this.target.piece === piece)\n                continue;\n            builder.setPiece(piece);\n        }\n        const off = this.piece.pos > this.target.piece.pos ? 1 : -1;\n        return builder\n            .setPiece(this.piece.moveTo(this.target.pos))\n            .setPiece(this.king.moveTo(this.target.pos + off))\n            .build();\n    }\n}\nclass EnPassantCapture extends Move {\n    constructor(piece, target, captured) {\n        super(piece, target);\n        this._attack = true;\n        this._captured = captured;\n    }\n    execute(board) {\n        const builder = new _board__WEBPACK_IMPORTED_MODULE_0__.Builder(board.opponent.ally);\n        for (const piece of board.pieces) {\n            if (this.piece === piece || this._captured === piece)\n                continue;\n            builder.setPiece(piece);\n        }\n        return builder\n            .setPiece(this.piece.moveTo(this.target.pos))\n            .build();\n    }\n    get captured() { return this._captured; }\n}\nclass Promotion extends Move {\n    constructor(move, promoteTo) {\n        super(move.piece, move.target);\n        this._move = move;\n        this._promoteTo = promoteTo;\n    }\n    execute(board) {\n        const _board = this._move.execute(board);\n        const builder = new _board__WEBPACK_IMPORTED_MODULE_0__.Builder(_board.player.ally);\n        for (const piece of _board.pieces) {\n            if (piece.pos === this.target.pos)\n                builder.setPiece(this._promoteTo);\n            else\n                builder.setPiece(piece);\n        }\n        return builder\n            .build();\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/move.ts?')},"./src/piece.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Alliance": () => (/* binding */ Alliance),\n/* harmony export */   "Type": () => (/* binding */ Type),\n/* harmony export */   "default": () => (/* binding */ Piece),\n/* harmony export */   "Rook": () => (/* binding */ Rook),\n/* harmony export */   "Knight": () => (/* binding */ Knight),\n/* harmony export */   "Bishop": () => (/* binding */ Bishop),\n/* harmony export */   "Queen": () => (/* binding */ Queen),\n/* harmony export */   "King": () => (/* binding */ King),\n/* harmony export */   "Pawn": () => (/* binding */ Pawn),\n/* harmony export */   "getSymbol": () => (/* binding */ getSymbol)\n/* harmony export */ });\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./board */ "./src/board.ts");\n/* harmony import */ var _move__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./move */ "./src/move.ts");\n\n\nvar Alliance;\n(function (Alliance) {\n    Alliance[Alliance["W"] = 0] = "W";\n    Alliance[Alliance["B"] = 1] = "B";\n})(Alliance || (Alliance = {}));\n;\nvar Type;\n(function (Type) {\n    Type["R"] = "\\u265C";\n    Type["N"] = "\\u265E";\n    Type["B"] = "\\u265D";\n    Type["Q"] = "\\u265B";\n    Type["K"] = "\\u265A";\n    Type["P"] = "\\u265F";\n})(Type || (Type = {}));\n;\nclass Piece {\n    constructor(type, pos, ally, moved = false) {\n        this._type = type;\n        this._pos = pos;\n        this._ally = ally;\n        this._moved = moved;\n    }\n    get ally() { return this._ally; }\n    get col() { return this._pos & 7; }\n    get moved() { return this._moved; }\n    get pos() { return this._pos; }\n    get row() { return this._pos >> 3; }\n    get type() { return this._type; }\n}\n;\nclass Rook extends Piece {\n    constructor(pos, ally, moved = false) {\n        super(Type.R, pos, ally, moved);\n    }\n    *calculateLegalMoves(board) {\n        for (const off of [-8, -1, 1, 8]) {\n            let dest = this.pos;\n            while (_board__WEBPACK_IMPORTED_MODULE_0__["default"].isValidPosition(dest + off)) {\n                if (((dest & 7) === 0 && off === -1) ||\n                    ((dest & 7) === 7 && off === 1))\n                    break;\n                dest += off;\n                const tile = board.getTile(dest);\n                const move = new _move__WEBPACK_IMPORTED_MODULE_1__.Normal(this, tile);\n                if (tile.piece === null || tile.piece.ally !== this.ally)\n                    yield move;\n                if (tile.piece !== null) {\n                    if (this.ally === tile.piece.ally && tile.piece.type === Type.K) {\n                        if (!this.moved && !tile.piece.moved)\n                            yield new _move__WEBPACK_IMPORTED_MODULE_1__.Castling(this, board.getTile(dest).piece, tile);\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    moveTo(dest) {\n        return new Rook(dest, this.ally, true);\n    }\n}\nclass Knight extends Piece {\n    constructor(pos, ally, moved = false) {\n        super(Type.N, pos, ally, moved);\n    }\n    *calculateLegalMoves(board) {\n        for (const off of [-17, -15, -10, -6, 6, 10, 15, 17]) {\n            const dest = this.pos + off;\n            if (!_board__WEBPACK_IMPORTED_MODULE_0__["default"].isValidPosition(dest) ||\n                ((this.pos & 7) === 0 && [-17, -10, 6, 15].includes(off)) ||\n                ((this.pos & 7) === 1 && [-10, 6].includes(off)) ||\n                ((this.pos & 7) === 6 && [-6, 10].includes(off)) ||\n                ((this.pos & 7) === 7 && [-15, -6, 10, 17].includes(off)))\n                continue;\n            const tile = board.getTile(dest);\n            if (tile.piece && tile.piece.ally === this.ally)\n                continue;\n            yield new _move__WEBPACK_IMPORTED_MODULE_1__.Normal(this, tile);\n        }\n    }\n    moveTo(dest) {\n        return new Knight(dest, this.ally, true);\n    }\n}\nclass Bishop extends Piece {\n    constructor(pos, ally, moved = false) {\n        super(Type.B, pos, ally, moved);\n    }\n    *calculateLegalMoves(board) {\n        for (const off of [-9, -7, 7, 9]) {\n            let dest = this.pos;\n            while (_board__WEBPACK_IMPORTED_MODULE_0__["default"].isValidPosition(dest + off)) {\n                if (((dest & 7) === 0 && [-9, 7].includes(off)) ||\n                    ((dest & 7) === 7 && [-7, 9].includes(off)))\n                    break;\n                dest += off;\n                const tile = board.getTile(dest);\n                const move = new _move__WEBPACK_IMPORTED_MODULE_1__.Normal(this, tile);\n                if (tile.piece === null || tile.piece.ally !== this.ally)\n                    yield move;\n                if (tile.piece !== null)\n                    break;\n            }\n        }\n    }\n    moveTo(dest) {\n        return new Bishop(dest, this.ally, true);\n    }\n}\nclass Queen extends Piece {\n    constructor(pos, ally, moved = false) {\n        super(Type.Q, pos, ally, moved);\n    }\n    *calculateLegalMoves(board) {\n        for (const off of [-9, -8, -7, -1, 1, 7, 8, 9]) {\n            let dest = this.pos;\n            while (_board__WEBPACK_IMPORTED_MODULE_0__["default"].isValidPosition(dest + off)) {\n                if (((dest & 7) === 0 && [-9, -1, 7].includes(off)) ||\n                    ((dest & 7) === 7 && [-7, 1, 9].includes(off)))\n                    break;\n                dest += off;\n                const tile = board.getTile(dest);\n                const move = new _move__WEBPACK_IMPORTED_MODULE_1__.Normal(this, tile);\n                if (tile.piece === null || tile.piece.ally !== this.ally)\n                    yield move;\n                if (tile.piece !== null)\n                    break;\n            }\n        }\n    }\n    moveTo(dest) {\n        return new Queen(dest, this.ally, true);\n    }\n}\nclass King extends Piece {\n    constructor(pos, ally, moved = false) {\n        super(Type.K, pos, ally, moved);\n    }\n    *calculateLegalMoves(board) {\n        for (const off of [-9, -8, -7, -1, 1, 7, 8, 9]) {\n            let dest = this.pos;\n            if (!_board__WEBPACK_IMPORTED_MODULE_0__["default"].isValidPosition(dest + off) ||\n                ((this.pos & 7) === 0 && [-9, -1, 7].includes(off)) ||\n                ((this.pos & 7) === 7 && [-7, 1, 9].includes(off)))\n                continue;\n            dest += off;\n            const tile = board.getTile(dest);\n            if (tile.piece !== null && tile.piece.ally === this.ally)\n                continue;\n            yield new _move__WEBPACK_IMPORTED_MODULE_1__.Normal(this, tile);\n        }\n    }\n    moveTo(dest) {\n        return new King(dest, this.ally, true);\n    }\n}\nclass Pawn extends Piece {\n    constructor(pos, ally, moved = false) {\n        super(Type.P, pos, ally, moved);\n    }\n    *calculateLegalMoves(board) {\n        const dir = this.ally === Alliance.W ? -1 : 1;\n        for (const off of [7, 8, 9, 16]) {\n            const dest = this.pos + off * dir;\n            if (!_board__WEBPACK_IMPORTED_MODULE_0__["default"].isValidPosition(dest) ||\n                ((this.pos & 7) === 0 && [-9, 7].includes(off * dir)) ||\n                ((this.pos & 7) === 7 && [-7, 9].includes(off * dir)))\n                continue;\n            const tile = board.getTile(dest);\n            const move = new _move__WEBPACK_IMPORTED_MODULE_1__.Normal(this, tile);\n            switch (off) {\n                case 7:\n                case 9:\n                    {\n                        if (tile.piece !== null && tile.piece.ally !== this.ally) {\n                            if ([0, 7].includes(dest >> 3)) {\n                                yield new _move__WEBPACK_IMPORTED_MODULE_1__.Promotion(move, new Queen(dest, this.ally, true));\n                            }\n                            else\n                                yield move;\n                        }\n                        else if (board.enpassant !== null &&\n                            board.enpassant.ally !== this.ally &&\n                            Math.abs(board.enpassant.pos - dest) === 8 &&\n                            Math.abs(board.enpassant.pos - this.pos) === 1) {\n                            yield new _move__WEBPACK_IMPORTED_MODULE_1__.EnPassantCapture(this, tile, board.enpassant);\n                        }\n                    }\n                    break;\n                case 16:\n                    {\n                        const behind = board.getTile(dest - dir * 8);\n                        if (this.moved || tile.piece || behind.piece)\n                            continue;\n                        yield new _move__WEBPACK_IMPORTED_MODULE_1__.PawnJump(this, tile);\n                    }\n                    break;\n                case 8: {\n                    if (tile.piece === null) {\n                        if ([0, 7].includes(dest >> 3)) {\n                            yield new _move__WEBPACK_IMPORTED_MODULE_1__.Promotion(move, new Queen(dest, this.ally, true));\n                        }\n                        else\n                            yield move;\n                    }\n                }\n            }\n        }\n    }\n    moveTo(dest) {\n        return new Pawn(dest, this.ally, true);\n    }\n}\nfunction getSymbol(piece) {\n    if (!piece)\n        return \'\';\n    switch (piece.ally) {\n        case Alliance.B: switch (piece.type) {\n            case Type.R: return \'\\u265c\';\n            case Type.N: return \'\\u265e\';\n            case Type.B: return \'\\u265d\';\n            case Type.Q: return \'\\u265b\';\n            case Type.K: return \'\\u265a\';\n            case Type.P: return \'\\u265f\';\n        }\n        case Alliance.W: switch (piece.type) {\n            case Type.R: return \'\\u2656\';\n            case Type.N: return \'\\u2658\';\n            case Type.B: return \'\\u2657\';\n            case Type.Q: return \'\\u2655\';\n            case Type.K: return \'\\u2654\';\n            case Type.P: return \'\\u2659\';\n        }\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/piece.ts?')},"./src/player.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "NoKingFound": () => (/* binding */ NoKingFound),\n/* harmony export */   "default": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece */ "./src/piece.ts");\n\nclass NoKingFound extends Error {\n    constructor(ally) {\n        super(`No king found for ${ally === _piece__WEBPACK_IMPORTED_MODULE_0__.Alliance.W ? \'white\' : \'black\'} player`);\n    }\n}\nclass Player {\n    constructor(board, ally, pieces, moves) {\n        this._pieces = new Set();\n        this._moves = new Set();\n        this._king = null;\n        this.board = board;\n        this._ally = ally;\n        for (const piece of ally === _piece__WEBPACK_IMPORTED_MODULE_0__.Alliance.W ? pieces.white : pieces.black) {\n            this._pieces.add(piece);\n            if (piece instanceof _piece__WEBPACK_IMPORTED_MODULE_0__.King && !this._king)\n                this._king = piece;\n        }\n        for (const move of ally === _piece__WEBPACK_IMPORTED_MODULE_0__.Alliance.W ? moves.white : moves.black) {\n            this._moves.add(move);\n        }\n        if (this._king === null)\n            throw new NoKingFound(ally);\n        this._inCheck = Player.hasAttackOnTile(ally === _piece__WEBPACK_IMPORTED_MODULE_0__.Alliance.W ? moves.black : moves.white, this._king.pos);\n    }\n    *getMovesForPiece(piece) {\n        if (!this._pieces.has(piece))\n            return;\n        for (const move of this._moves) {\n            if (move.piece === piece)\n                yield move;\n        }\n    }\n    get ally() { return this._ally; }\n    get king() { return this._king; }\n    get moves() { return this._moves; }\n    get pieces() { return this._pieces; }\n    get check() { return this._inCheck; }\n    get checkmate() {\n        return this._inCheck && !this.hasEscapeMoves();\n    }\n    get stalemate() {\n        return !this._inCheck && !this.hasEscapeMoves();\n    }\n    hasEscapeMoves() {\n        for (const move of this._moves) {\n            try {\n                const board = move.execute(this.board);\n                if (!board.opponent.check)\n                    return true;\n            }\n            catch (err) {\n                continue;\n            }\n        }\n        return false;\n    }\n    static hasAttackOnTile(moves, pos) {\n        for (const move of moves) {\n            if (move.target.pos === pos)\n                return true;\n        }\n        return false;\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/player.ts?')}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/ai/worker.ts")})();